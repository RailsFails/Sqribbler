<!DOCTYPE html>
<html>
<head>
  <title>Editing canvas</title>
  <!-- stylesheet -->
  <%= stylesheet_link_tag '/assets/literallycanvas-0.4.11/css/literallycanvas.css' %>

  <!-- dependency: React.js -->
  <script src="//cdnjs.cloudflare.com/ajax/libs/react/0.13.3/react-with-addons.js"></script>

  <!-- Literally Canvas -->
  <script src="/assets/literallycanvas-0.4.11/js/literallycanvas.js"></script>


  <style>
    body {
      padding: 0;
      margin: 0;
    }
  </style>
</head>
<body>

<!-- where the widget goes. you can do CSS to it. -->
<div class="literally"></div>

<!-- kick it off -->
<script>

  var viewportWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
  var viewportHeight = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
  viewportWidth -= 60; // width of the toolbar
  viewportHeight -= 30; // height of the top toolbar
  var image_info = <%= @image.to_json.html_safe %>;

  function save_image(lc) {
    if (confirm("overwrite image?")) {
      var base64_data = lc.getImage({scaleDownRetina: false}).toDataURL();
      var xmlhttp = new XMLHttpRequest();   // new HttpRequest instance
      xmlhttp.open("PATCH", "/images/" + image_info.id+".json");
      xmlhttp.setRequestHeader("Content-Type", "application/json");
      xmlhttp.send(JSON.stringify({
        utf8: "âœ“",
        image: {
          id: image_info.id,
          user_id: image_info.user_id,
          attachment: base64_data
        },
        commit: "Update Image"
      }));
      //window.open(base64_data);
    }
  }

  function save_as_new_image(lc) {
    prompt("title");
  }

  var save_image_tool = function (lc) {  // take lc as constructor arg
    var self = this;

    return {
      name: 'save',
      iconName: 'save',
      didBecomeActive: function () {
        save_image(lc);
      },
      begin: function (x, y, lc) {
      },
      continue: function (x, y, lc) {
      },
      end: function (x, y, lc) {
      }
    }
  };

  var new_image_tool = function (lc) {  // take lc as constructor arg
    var self = this;

    return {
      name: 'new image',
      iconName: 'new',
      didBecomeActive: function () {
        save_as_new_image(lc);
      },
      begin: function (x, y, lc) {
      },
      continue: function (x, y, lc) {
      },
      end: function (x, y, lc) {
      }
    }
  };

  var image_width = null;
  var image_height = null;

  image_width = <%= @image.image_width %>;
  image_height = <%= @image.image_height %>;

  var scale = Math.min((viewportHeight * 1.0) / image_height, (viewportWidth * 1.0) / image_width);
  var zoom_level = Math.min((image_height * 1.0) / viewportHeight, (image_width * 1.0) / viewportWidth);

  var lc_options = {
    imageURLPrefix: '/assets/literallycanvas-0.4.11/img/',
    tools: LC.defaultTools.concat([save_image_tool, new_image_tool]),
    imageSize: {width: image_width, height: image_height}
  };

  var lc = LC.init(document.getElementsByClassName('literally')[0], lc_options);
  lc.zoom(-zoom_level);

  <% unless @image.nil? %>
  var newImage = new Image();
  newImage.src = '<%= @image.attachment.url(:original) %>';

  newImage.onload = function () {
    lc.saveShape(LC.createShape('Image', {x: 0, y: 0, image: newImage}));

  };

  <% end %>



  /* or if you just love jQuery,
   $('.literally').literallycanvas({imageURLPrefix: '/static/img'})
   or
   LC.init($('.literally').get(0), {imageURLPrefix: '/static/img'})
   */
</script>
</body>
</html>